import math

class AlgebraVectorial:
    def init(self, *args):
        if len(args) == 1 and isinstance(args[0], (list, tuple)):
            self.componentes = tuple(args[0])
        else:
            self.componentes = args

    def dot(self, other):
        return sum(a * b for a, b in zip(self.componentes, other.componentes))
    
    def cross(self, other):
        if len(self.componentes) == 3 and len(other.componentes) == 3:
            a = self.componentes
            b = other.componentes
            return AlgebraVectorial(
                a[1]*b[2] - a[2]*b[1],
                a[2]*b[0] - a[0]*b[2],
                a[0]*b[1] - a[1]*b[0]
            )
        raise ValueError("Producto cruz solo para 3D")

    def proyeccion(self, other):
        mag_sq = sum(x**2 for x in other.componentes)
        if mag_sq == 0:
            return None
        factor = self.dot(other) / mag_sq
        return AlgebraVectorial(*[factor * x for x in other.componentes])
    
    def str(self):
        return f"({','.join(map(str, self.componentes))})"

def input_vector(prompt):
    while True:
        try:
            entrada = input(prompt).strip()
            componentes = [float(x) for x in entrada.split(',')]
            if len(componentes) != 3:
                raise ValueError
            return AlgebraVectorial(*componentes)
        except ValueError:
            print("Formato incorrecto. Ingrese 3 valores separados por comas (ej: 1,2,3)")

if name == "main":
    print("Algebra Vectorial\n")
    
    a = input_vector("a: ")
    b = input_vector("b: ")
  
    escalar = a.dot(b)
    vectorial = a.cross(b)
    proyeccion = a.proyeccion(b)
  
    print(f"\nproducto escalar = {escalar}")
    print(f"producto vectorial {vectorial}")
    print(f"Proyeccion de a sobre b: {proyeccion if proyeccion else 'nullo'}")
